{"version":3,"file":"static/js/62.e138c554.chunk.js","mappings":"4XAuBMA,EAAiB,CACnBC,MAAO,GACPC,KAAM,GACNC,SAAU,IAgBRC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAkB,CACrC,sBAAuB,CACrBE,MAAO,WAET,8BAA+B,CAC7BC,kBAAmB,SAErB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,WAEf,mBAAoB,CAClBA,YAAa,WAEf,yBAA0B,CACxBA,YAAa,cA8GnB,UAzGiB,WACb,OAA4BC,EAAAA,EAAAA,UAASV,GAArC,eAAOW,EAAP,KAAeC,EAAf,KAEA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAOXC,EAAe,SAAAC,GACjB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,MAAOpB,EAAf,EAAeA,KACfU,GAAU,SAAAW,GAAI,yBAAUA,GAAV,cAAiBrB,EAAOoB,GAAxB,GACjB,EAEKE,EAAY,mCAAG,WAAOC,GAAP,wEACjBA,EAAIC,iBADa,kBAMPX,GAASY,EAAAA,EAAAA,IAAgBhB,IAASiB,SAN3B,OASbX,EAAS,IAAK,CAAEY,SAAS,IAEzBC,IAAAA,OAAAA,QAAwB,YAXX,gDAcbC,QAAQC,IAAR,MACAF,IAAAA,OAAAA,QAAwB,gBAfX,yDAAH,sDAmBlB,OACI,+BAGI,UAAC,IAAD,CACIG,UAAU,OACVC,GAAI,CAAC,uBAAwB,CAAEC,EAAG,EAAGC,MAAO,SAC5CC,YAAU,EACVC,aAAa,MACbC,SAAUf,EALd,WAOI,SAACpB,EAAD,CACIoC,GAAG,4BACHC,MAAM,OACNC,YAAY,YACZC,WAAS,EACTC,KAAK,OACL1C,KAAK,OACL2C,UAAQ,EACRC,SAAU3B,EACVG,MAAOX,EAAOT,QAElB,SAACE,EAAD,CACIoC,GAAG,4BACHC,MAAM,QACNC,YAAY,aACZC,WAAS,EACTC,KAAK,OACL1C,KAAK,QACL2C,UAAQ,EACRC,SAAU3B,EACVG,MAAOX,EAAOV,SAElB,UAAC,IAAD,CAAaiC,GAAI,CAAEC,EAAG,EAAGC,MAAO,QAAUW,QAAQ,WAAlD,WACI,SAAC,IAAD,CAAYC,QAAQ,8BAApB,uBACA,SAAC,IAAD,CACIR,GAAG,8BACHI,KAAM/B,EAAe,OAAS,WAC9BoC,cACA,SAAC,IAAD,CAAgBC,SAAS,MAAzB,UACI,SAAC,IAAD,CACA,aAAW,6BACXC,QAvEQ,kBAAMrC,GAAgB,SAACsC,GAAD,OAAWA,CAAX,GAAtB,EAwERC,YAtEQ,SAACjC,GAC7BA,EAAMM,gBACT,EAqEuB4B,KAAK,MAJL,SAMCzC,GAAe,SAAC,IAAD,KAAoB,SAAC,IAAD,QAIxC4B,MAAM,WACNvC,KAAK,WACL2C,UAAQ,EACRC,SAAU3B,EACVG,MAAOX,EAAOR,eAGtB,SAAC,KAAD,CAAMoD,GAAG,QAAQC,UAAU,eAA3B,mCAGA,mBAAQA,UAAU,oCAAoCZ,KAAK,SAA3D,yBAOf,C","sources":["pages/JoinPage/JoinPage.jsx"],"sourcesContent":["import { useState } from \"react\";\n// import { Formik, ErrorMessage, Form, Field } from 'formik'; \n// import Spinner from \"components/Spinner/Spinner\";\n// import * as yup from 'yup';\nimport { Link, useNavigate } from \"react-router-dom\";\n\n\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Visibility from '@mui/icons-material/Visibility';\nimport { styled } from '@mui/material/styles';\n// import axios from \"axios\";\nimport Notiflix from \"notiflix\";\n// import { publicApi } from \"http/http\";\nimport { authSignUpThunk } from \"redux/auth/auth.thunk\";\nimport { useDispatch } from \"react-redux\";\n\nconst inittialValues = {\n    email: '',\n    name: '',\n    password: '',\n};\n\n// const schemaUser = yup.object().shape({\n//     name: yup.string().min(2, 'Your name is too short')\n//         .max(50, 'Your name must not be longer than 40 characters')\n//         .required('User name required'),\n//     email: yup.string().min(5, 'Your email is too short')\n//         .max(40, 'Your email must be shorter 40 characters')\n//         .required('User email required'),\n//     password: yup.string()\n//         .min(7, 'Your password must be longer than 7 characters and must contain numbers and at least 1 capital letter')\n//         .max(40, 'your password must not be longer than 40 characters')\n//         .required('User password required'),\n// })\n\nconst CssTextField = styled(TextField)({\n  '& label.Mui-focused': {\n    color: '#6f172b',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#b73c58',\n    },\n    '&:hover fieldset': {\n      borderColor: '#bdbdbd',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#b73c58',\n    },\n  },\n});\n\nconst JoinPage = () => {\n    const [values, setValues] = useState(inittialValues);\n    // const [isLoading, setIsLoading] = useState(false); \n    const [showPassword, setShowPassword] = useState(false);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n    const handleChange = event => {\n        const { value, name } = event.target;\n        setValues(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleSubmit = async (evt) => {\n        evt.preventDefault();\n        // console.log(values);\n        try {\n            // setIsLoading(true);\n            // await publicApi.post('/users/signup', values);\n            await dispatch(authSignUpThunk(values)).unwrap();\n            // Notiflix.Notify.success(\"It's ok!\");\n            // console.log(data);\n            navigate('/', { replace: true });\n            // setIsLoading(false);\n            Notiflix.Notify.success(\"It's ok!\");\n                           \n        } catch (error) {\n            console.log(error);\n            Notiflix.Notify.failure('Some mistake');\n        }\n        \n    }\n    return (\n        <>\n            {/* {isLoading && <p><Spinner /></p>} */}\n            \n            <Box\n                component=\"form\"\n                sx={{'& .MuiTextField-root': { m: 1, width: '25ch' },}}\n                noValidate\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n                >\n                <CssTextField\n                    id=\"custom-css-outlined-input\"\n                    label=\"Name\"\n                    placeholder=\"User name\"\n                    multiline\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    onChange={handleChange}\n                    value={values.name}\n                />\n                <CssTextField\n                    id=\"custom-css-outlined-input\"\n                    label=\"Email\"\n                    placeholder=\"User email\"\n                    multiline\n                    type=\"text\"\n                    name=\"email\"\n                    required\n                    onChange={handleChange}\n                    value={values.email}\n                />\n                <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\">\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                    <OutlinedInput\n                        id=\"outlined-adornment-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        endAdornment={\n                        <InputAdornment position=\"end\">\n                            <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            >\n                            {showPassword ? <VisibilityOff /> : <Visibility />}\n                            </IconButton>\n                        </InputAdornment>\n                        }\n                        label=\"Password\"\n                        name='password'\n                        required\n                        onChange={handleChange}\n                        value={values.password}\n                    />\n                </FormControl>\n                <Link to='login' className='d-block my-4'>\n                    Already has account?\n                </Link>\n                <button className=\"w-100 mt-2 btn btn-lg btn-primary\" type=\"submit\">\n                    Sign In\n                </button>\n            </Box>\n            \n        </>\n    )\n}\n\nexport default JoinPage;"],"names":["inittialValues","email","name","password","CssTextField","styled","TextField","color","borderBottomColor","borderColor","useState","values","setValues","showPassword","setShowPassword","dispatch","useDispatch","navigate","useNavigate","handleChange","event","target","value","prev","handleSubmit","evt","preventDefault","authSignUpThunk","unwrap","replace","Notiflix","console","log","component","sx","m","width","noValidate","autoComplete","onSubmit","id","label","placeholder","multiline","type","required","onChange","variant","htmlFor","endAdornment","position","onClick","show","onMouseDown","edge","to","className"],"sourceRoot":""}